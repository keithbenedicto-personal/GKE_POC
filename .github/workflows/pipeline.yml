# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the main branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke

name: Build and Deploy to GKE

on:
  push:
    branches:
      - main

env: #Variables
  PROJECT_ID: ${{ secrets.GKE_PROJECT }} # Accesses the secret you created from GKE, this is the ProjectID in your GCP Project
  GKE_CLUSTER: github-actions-gke    # Name of your Cluster
  GKE_ZONE: us-central1   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test-github-actions # Any name you want to use to deploy
  IMAGE: github-actions-gke-image #Any name you want to use when the docker image is created
  TAG: 1.0.0 # Any tag you want, you can use this for versioning

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
        server-id: github
        settings-path: ${{ github.workpsace }}

    - name: Build Springboot with Maven
      run: mvn clean package -DskipTests

    - name: Setup Google CLI
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure the Docker image using Google CLI, we set-up CLI first so that we can just run commands like in a simple command line.
    - name: Configure Docker
      run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - name: Get the GKE Credentials
      uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Build the Docker image
    - name: Building Docker Image
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$TAG" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Publish the created image to GCR
    - name: Publish the created Docker Image
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

    # Set up kustomize, kustomize is counterpart of helm in GCP
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
